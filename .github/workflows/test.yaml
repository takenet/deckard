name: Test

on: [pull_request]

env:
  GO_VERSION: 1.18

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
        - 27017:27017

      redis:
        image: redis:7.0
        ports:
        - 6379:6379

    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-golang-

    - uses: actions/checkout@v3

    - name: Install mockgen
      run: go install github.com/golang/mock/mockgen@latest

    - name: Make gen-mocks
      run: make gen-mocks

    - name: Go mod tidy
      run: go mod tidy

    - name: Make test
      run: make test

    - name: Publish test results
      uses: actions/upload-artifact@v3
      with:
        name: gotest.out
        path: gotest.out
      if: always()

    - name: Install go-junit-report
      run: go install github.com/jstemmer/go-junit-report@latest
      if: always()

    - name: Generate JUnit report
      run: cat gotest.out | go-junit-report -set-exit-code > junit.xml
      if: always()

    - name: Cat debugging
      run: cat gotest.out
      if: always()

    - name: Cat debugging
      run: cat junit.xml
      if: always()

    - name: Publish JUnit report
      uses: actions/upload-artifact@v2
      with:
        name: junit.xml
        path: junit.xml
      if: always()

    - name: JUnit report action
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: junit.xml

    - name: Coverage Report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
      if: always()
